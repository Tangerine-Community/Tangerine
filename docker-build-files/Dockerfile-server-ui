FROM --platform=linux/amd64 node:18-alpine3.17
#FROM node:18-alpine
ARG TARGETARCH
RUN echo "I'm building for $TARGETARCH"
ARG TARGETPLATFORM
ARG BUILDPLATFORM
RUN echo "I am running on $BUILDPLATFORM, building for $TARGETPLATFORM"
#RUN apk update
#RUN apk add git

RUN apk fix && \
    apk --no-cache --update add git git-lfs gpg less openssh patch && \
    git lfs install

RUN git config --global url."https://".insteadOf git://

# Never ask for confirmations
#ENV DEBIAN_FRONTEND noninteractive
#RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections

# Install global node dependencies
# set unsafe-perm true allows it to work on ARM Macs(M1)
#RUN npm config set unsafe-perm true
#RUN #npm install -g uuid couchdb-wedge
#RUN npm config set unsafe-perm false

# Install helpful JSON utility.
RUN apk update && apk add jq

# T_USER1 is the username of the first user you will log in as. It is also the super user that has all permissions. 
ENV T_USER1 user1
ENV T_USER1_PASSWORD password
# T_ADMIN is the admin user for your database. Make sure to change this so the outside world does not have access.
ENV T_ADMIN admin
ENV T_PASS password
# T_HOST_NAME is the URL without protocol (like http://) you will be accessing your Tangerine server at.
ENV T_HOST_NAME 127.0.0.1 
# If you have set up SSL on your server, you must change this to "https".
ENV T_PROTOCOL http
# Set to "development" for live code reload of editor and client.
ENV T_RUN_MODE production

# workaround for "Error: error:0308010C:digital envelope routines::unsupported"
# NODE_OPTIONS=--openssl-legacy-provider (below)

ADD tangy-form /tangerine/tangy-form/
#RUN cd /tangerine/tangy-form && \
#    npm install
ADD tangy-form-editor /tangerine/tangy-form-editor/
RUN cd /tangerine/tangy-form-editor && \
    npm install

## Install editor.
ADD ./editor/package.json /tangerine/editor/package.json
RUN cd /tangerine/editor && \
    npm install
#

## Install server-ui.
ADD ./server-ui/package.json /tangerine/server-ui/package.json
RUN cd /tangerine/server-ui && \
    npm install

## Build editor.
ADD editor /tangerine/editor
#RUN cd /tangerine/editor && \
##    export NODE_OPTIONS=--openssl-legacy-provider && \
#    npm dedupe
RUN cd /tangerine/editor && \
#    export NODE_OPTIONS=--openssl-legacy-provider && \
    ./node_modules/.bin/ng build --base-href "./" -c production

# Disabling building service worker for editor.
RUN cd /tangerine/editor && ./node_modules/.bin/workbox generateSW

#
# Add the rest of server.
ADD server-ui /tangerine/server-ui

# Link up global commands.
RUN cd /tangerine/server-ui && \
    npm link

# Wrap up

RUN mkdir /csv
RUN mkdir /groups
#RUN echo {} > /paid-worker-state.json
#ENV NODE_OPTIONS "--openssl-legacy-provider"
EXPOSE 80
#ENTRYPOINT cd /tangerine/server-ui/ && npm start
ADD entrypoint-server-ui.sh /tangerine
CMD ["/tangerine/entrypoint-server-ui.sh"]
# Used for testing...
#CMD ["/bin/sh"]
